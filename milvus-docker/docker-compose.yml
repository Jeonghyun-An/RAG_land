services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: etcd
    environment:
      - ETCD_AUTO_COMPACTION_RETENTION=1
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
      - ETCD_ENABLE_V2=true
      - ETCD_LOG_LEVEL=info
      # 🔴 외부 컨테이너가 붙을 수 있게 0.0.0.0로 리슨 + etcd:2379로 광고
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
      - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
      - ETCD_INITIAL_CLUSTER=default=http://etcd:2380    # 🔴 요거 추가!
      - ETCD_NAME=default 
      - ETCDCTL_API=3 
    ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - milvus_etcd_data:/etcd
    networks:
      - ragnet
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:2379/health"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  minio:
    # (가능하면 최신으로 올리고 MINIO_ROOT_* 사용 권장)
    image: minio/minio:RELEASE.2023-01-20T02-05-44Z
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      # 최신 버전 쓸 땐:
      # MINIO_ROOT_USER: minioadmin
      # MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - ragnet
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  milvus:
    image: milvusdb/milvus:v2.2.11
    container_name: milvus
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      # 필요 시 외부 MinIO를 Milvus 내부 스토리지로 쓰려면 별도 설정이 필요하지만,
      # 지금은 별개 MinIO(문서 저장용)라면 이대로 OK
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - ragnet
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 5s
      timeout: 3s
      retries: 20
    restart: unless-stopped

  fastapi:
    build:
      context: ..
      dockerfile: milvus-docker/Dockerfile
    container_name: fastapi
    ports:
      - "8000:8000"
    volumes:
      - ../app:/app
      - ../models:/models
    environment:
      # 🔵 도커 환경 플래그 (MinIO/Milvus를 서비스명으로 붙게)
      IS_DOCKER: "true"
      # 선택: 명시적으로 지정하고 싶으면 아래도 추가
      # MINIO_ENDPOINT: "minio:9000"
      # MINIO_ACCESS_KEY: "minioadmin"
      # MINIO_SECRET_KEY: "minioadmin"
      # MINIO_BUCKET: "rag-docs"
      # HUGGINGFACE_TOKEN: "${HUGGINGFACE_TOKEN}"
    networks:
      - ragnet
    depends_on:
      milvus:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

volumes:
  milvus_etcd_data:
  milvus_data:
  minio_data:

networks:
  ragnet:
